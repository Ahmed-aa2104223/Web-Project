generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id       String  @id @default(uuid()) // Use UUIDs for the User ID
  email    String  @unique
  password String
  state    String  // e.g., "administrator", "student", "instructor"
}

model Instructor {
  id        String      @id @default(uuid()) // Use UUIDs for the Instructor ID
  name      String
  email     String      @unique
  expertise String
  offerings CourseOffering[] @relation("InstructorOfferings")
}

model CourseDefinition {
  id             String      @id @default(uuid()) // Use UUIDs for CourseDefinition ID
  courseName     String
  courseCode     String      @unique
  creditHour     Int
  offerings      CourseOffering[]
  prerequisites  Prerequisite[] @relation("CoursePrerequisite")
  requiredFor    Prerequisite[] @relation("RequiredBy")
}

model Prerequisite {
  id             String          @id @default(uuid()) // Use UUIDs for Prerequisite ID
  course         CourseDefinition @relation("CoursePrerequisite", fields: [courseId], references: [id])
  courseId       String
  prerequisite   CourseDefinition @relation("RequiredBy", fields: [prerequisiteId], references: [id])
  prerequisiteId String
}

model CourseOffering {
  id            String       @id @default(uuid()) // Use UUIDs for CourseOffering ID
  CRN           String       @unique
  status        String
  seats         Int
  approved      Boolean
  instructor    Instructor   @relation("InstructorOfferings", fields: [instructorId], references: [id])
  instructorId  String
  course        CourseDefinition @relation(fields: [courseId], references: [id])
  courseId      String
  students      StudentCourse[] @relation("CourseEnrollments")
}

model Student {
  id        String          @id // student ID as primary key (String type)
  name      String
  email     String          @unique
  GPA       Float
  courses   StudentCourse[] @relation("StudentEnrollments")
}

model StudentCourse {
  id         String        @id @default(uuid()) // Use UUIDs for StudentCourse ID
  student    Student       @relation("StudentEnrollments", fields: [studentId], references: [id])
  studentId  String
  course     CourseOffering @relation("CourseEnrollments", fields: [courseId], references: [id])
  courseId   String
  grade      String
  status     String
}
